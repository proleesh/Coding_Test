<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 빈 구성 시 attribute로 자식 ApplicationContext와 부모 ApplicationContext의 빈을 
		참조할 수 있습니다. 이렇게 하면 빈을 transparently 즉 투명하게 참조할 수 있어서 애플리케이션이 커지면 구성 파일간에 
		빈을 이동할 수 있습니다. -->
	<!-- 두 번째 중요한 점은 local attribute를 사용해 부모 ApplicationContext의 빈을 참조할 수 없다는 
		것입니다. XML파선느 local attribute의 값이 동일한 파일에 유효한 요소로 존재하는지 확인하므로 부모 컨텍스트의 빈을 
		참조하지 않도록 합니다. -->
	<bean id="song1" class="com.kr.prospring5.ch3.Song"
		p:title-ref="parentTitle"></bean>
	<!-- song1 빈은 ref attribute를 사용해 parentTitle이라는 빈을 참조합니다. parentTitle 빈은 
		부모 BeanFctory(parent-context.xml)에만 존재하므로 song1은 parentTitle 빈에 대한 참조를 받습니다. -->
	<bean id="song2" class="com.kr.prospring5.ch3.Song"
		p:title-ref="childTitle"></bean>
	<!-- song2 빈은 ref attribute를 사용해 childTitle을 참조합니다. song2 빈이 참조하는 childTitle빈이 
		양쪽 ApplicationContext에 정의돼 있으므로, song2 빈은 자신의 ApplicationContext에서childTtitle에 
		대한 참조를 받습니다. -->
	<bean id="song3" class="com.kr.prospring5.ch3.Song">
		<property name="title">
			<ref parent="childTitle" />
		</property>
	</bean>
	<!-- song3 빈은 <ref> 태그를 사용해 부모ApplicationContext로부터 직접 childTitle을 참조합니다. 
		song3은 <ref>태그의 parent attribute를 사용하기 때문에 자식 ApplicationContext에 선언된 childTitle 
		인스턴스는 완전히 무시됩니다. -->

	<bean id="childTitle" class="java.lang.String" c:_0="해당 값이 없습니다."></bean>
</beans>